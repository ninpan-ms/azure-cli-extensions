# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddonProfile(Model):
    """Deployment addon profile.

    :param enabled: Whether the add-on is enabled or not
    :type enabled: bool
    :param properties: Key-value pairs for configurations of add-on
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(self, *, enabled: bool=None, properties=None, **kwargs) -> None:
        super(AddonProfile, self).__init__(**kwargs)
        self.enabled = enabled
        self.properties = properties


class Resource(Model):
    """The core properties of ARM resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)


class AppResource(ProxyResource):
    """App resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the App resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AppResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AppResourceProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(AppResource, self).__init__(**kwargs)
        self.properties = properties


class AppResourceProperties(Model):
    """App resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param public: Indicates whether the App exposes public endpoint
    :type public: bool
    :ivar url: URL of the App
    :vartype url: str
    :param addon_config: Collection of addons
    :type addon_config: dict[str,
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AddonProfile]
    :ivar provisioning_state: Provisioning state of the App. Possible values
     include: 'Succeeded', 'Failed', 'Creating', 'Updating'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AppResourceProvisioningState
    """

    _validation = {
        'url': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'public': {'key': 'public', 'type': 'bool'},
        'url': {'key': 'url', 'type': 'str'},
        'addon_config': {'key': 'addonConfig', 'type': '{AddonProfile}'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, *, public: bool=None, addon_config=None, **kwargs) -> None:
        super(AppResourceProperties, self).__init__(**kwargs)
        self.public = public
        self.url = None
        self.addon_config = addon_config
        self.provisioning_state = None


class Build(ProxyResource):
    """Build resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the build resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.BuildProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BuildProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(Build, self).__init__(**kwargs)
        self.properties = properties


class BuildContainerImageReference(Model):
    """The generated container image reference.

    :param acr_name: The name of ACR
    :type acr_name: str
    :param image_name: The name of image
    :type image_name: str
    :param digest: The digest of this acr image
    :type digest: str
    :param tag: The tag of this acr image
    :type tag: str
    """

    _attribute_map = {
        'acr_name': {'key': 'acrName', 'type': 'str'},
        'image_name': {'key': 'imageName', 'type': 'str'},
        'digest': {'key': 'digest', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(self, *, acr_name: str=None, image_name: str=None, digest: str=None, tag: str=None, **kwargs) -> None:
        super(BuildContainerImageReference, self).__init__(**kwargs)
        self.acr_name = acr_name
        self.image_name = image_name
        self.digest = digest
        self.tag = tag


class BuildProperties(Model):
    """Build resource properties payload.

    :param builder: The name of builder to build the source code
    :type builder: str
    :param name: The name of this build
    :type name: str
    :param relative_path: The relative path of source code
    :type relative_path: str
    :param env: The environment variables for this build
    :type env: dict[str, str]
    :param triggered_build_result:  The build result triggered by this build
    :type triggered_build_result:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.TriggeredBuildResult
    """

    _attribute_map = {
        'builder': {'key': 'builder', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'relative_path': {'key': 'relativePath', 'type': 'str'},
        'env': {'key': 'env', 'type': '{str}'},
        'triggered_build_result': {'key': 'triggeredBuildResult', 'type': 'TriggeredBuildResult'},
    }

    def __init__(self, *, builder: str=None, name: str=None, relative_path: str=None, env=None, triggered_build_result=None, **kwargs) -> None:
        super(BuildProperties, self).__init__(**kwargs)
        self.builder = builder
        self.name = name
        self.relative_path = relative_path
        self.env = env
        self.triggered_build_result = triggered_build_result


class BuildResult(ProxyResource):
    """Build result resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the build result resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.BuildResultProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BuildResultProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(BuildResult, self).__init__(**kwargs)
        self.properties = properties


class BuildResultLog(ProxyResource):
    """Build result log resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the build result log resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.BuildResultLogProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'BuildResultLogProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(BuildResultLog, self).__init__(**kwargs)
        self.properties = properties


class BuildResultLogProperties(Model):
    """Build result log resource properties payload.

    :param blob_url: The public download URL of this build result log
    :type blob_url: str
    """

    _attribute_map = {
        'blob_url': {'key': 'blobUrl', 'type': 'str'},
    }

    def __init__(self, *, blob_url: str=None, **kwargs) -> None:
        super(BuildResultLogProperties, self).__init__(**kwargs)
        self.blob_url = blob_url


class BuildResultProperties(Model):
    """Build result resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param name: The name of this build result
    :type name: str
    :ivar status: Provisioning state of the KPack build result. Possible
     values include: 'Queuing', 'Building', 'Succeeded', 'Failed', 'Deleting',
     'Deleted'
    :vartype status: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.BuildResultProvisioningState
    :param container_image_reference: The generated container image reference
    :type container_image_reference:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.BuildContainerImageReference
    """

    _validation = {
        'status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'container_image_reference': {'key': 'containerImageReference', 'type': 'BuildContainerImageReference'},
    }

    def __init__(self, *, name: str=None, container_image_reference=None, **kwargs) -> None:
        super(BuildResultProperties, self).__init__(**kwargs)
        self.name = name
        self.status = None
        self.container_image_reference = container_image_reference


class CloudError(Model):
    """An error response from the service.

    :param error: An error response from the service.
    :type error:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class ConfigurationServiceGitPropertyValidateResult(Model):
    """Validation result for configuration service settings.

    :param is_valid: Indicate if the configuration service settings are valid
    :type is_valid: bool
    :param git_repos_validate_result: The detail validation results
    :type git_repos_validate_result:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.ValidateMessages]
    """

    _attribute_map = {
        'is_valid': {'key': 'isValid', 'type': 'bool'},
        'git_repos_validate_result': {'key': 'gitReposValidateResult', 'type': '[ValidateMessages]'},
    }

    def __init__(self, *, is_valid: bool=None, git_repos_validate_result=None, **kwargs) -> None:
        super(ConfigurationServiceGitPropertyValidateResult, self).__init__(**kwargs)
        self.is_valid = is_valid
        self.git_repos_validate_result = git_repos_validate_result


class ConfigurationServiceProperties(Model):
    """Application Configuration Service properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: State of the Application Configuration Service.
     Possible values include: 'Creating', 'Updating', 'Succeeded', 'Failed',
     'Deleting', 'Deleted'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ConfigurationServiceProvisioningState
    :param runtime_state:
    :type runtime_state:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ConfigurationServiceRuntimeState
    :param configuration_service_settings:
    :type configuration_service_settings:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ConfigurationServiceSettings
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'runtime_state': {'key': 'runtimeState', 'type': 'ConfigurationServiceRuntimeState'},
        'configuration_service_settings': {'key': 'configurationServiceSettings', 'type': 'ConfigurationServiceSettings'},
    }

    def __init__(self, *, runtime_state=None, configuration_service_settings=None, **kwargs) -> None:
        super(ConfigurationServiceProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.runtime_state = runtime_state
        self.configuration_service_settings = configuration_service_settings


class ConfigurationServiceResource(ProxyResource):
    """Application Configuration Service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties:
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ConfigurationServiceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ConfigurationServiceProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(ConfigurationServiceResource, self).__init__(**kwargs)
        self.properties = properties


class ConfigurationServiceRuntimeState(Model):
    """Runtime state of the Application Configuration Service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar cpu: Cpu allocated to each Application Configuration Service
     instance
    :vartype cpu: str
    :ivar memory: Memory allocated to each Application Configuration Service
     instance
    :vartype memory: str
    :ivar instance_count: Instance count of the Application Configuration
     Service
    :vartype instance_count: int
    """

    _validation = {
        'cpu': {'readonly': True},
        'memory': {'readonly': True},
        'instance_count': {'readonly': True},
    }

    _attribute_map = {
        'cpu': {'key': 'cpu', 'type': 'str'},
        'memory': {'key': 'memory', 'type': 'str'},
        'instance_count': {'key': 'instanceCount', 'type': 'int'},
    }

    def __init__(self, **kwargs) -> None:
        super(ConfigurationServiceRuntimeState, self).__init__(**kwargs)
        self.cpu = None
        self.memory = None
        self.instance_count = None


class ConfigurationServiceSettings(Model):
    """The settings of Application Configuration Service.

    :param git_properties:
    :type git_properties:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.GitPatternRepository]
    """

    _attribute_map = {
        'git_properties': {'key': 'gitProperties', 'type': '[GitPatternRepository]'},
    }

    def __init__(self, *, git_properties=None, **kwargs) -> None:
        super(ConfigurationServiceSettings, self).__init__(**kwargs)
        self.git_properties = git_properties


class ConfigurationServiceSettingsValidateResult(Model):
    """Validation result for configuration service settings.

    :param git_property_validate_result:
    :type git_property_validate_result:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ConfigurationServiceGitPropertyValidateResult
    """

    _attribute_map = {
        'git_property_validate_result': {'key': 'gitPropertyValidateResult', 'type': 'ConfigurationServiceGitPropertyValidateResult'},
    }

    def __init__(self, *, git_property_validate_result=None, **kwargs) -> None:
        super(ConfigurationServiceSettingsValidateResult, self).__init__(**kwargs)
        self.git_property_validate_result = git_property_validate_result


class DeploymentInstance(Model):
    """Deployment instance payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the deployment instance
    :vartype name: str
    :ivar status: Status of the deployment instance
    :vartype status: str
    :ivar start_time: Deployed time of the deployment instance
    :vartype start_time: str
    """

    _validation = {
        'name': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(DeploymentInstance, self).__init__(**kwargs)
        self.name = None
        self.status = None
        self.start_time = None


class DeploymentResource(ProxyResource):
    """Deployment resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the Deployment resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceProperties
    :param sku: Sku of the Deployment resource
    :type sku: ~azure.mgmt.appplatform.v2021_03_01_preview.models.Sku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeploymentResourceProperties'},
        'sku': {'key': 'sku', 'type': 'Sku'},
    }

    def __init__(self, *, properties=None, sku=None, **kwargs) -> None:
        super(DeploymentResource, self).__init__(**kwargs)
        self.properties = properties
        self.sku = sku


class DeploymentResourceProperties(Model):
    """Deployment resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param source: Uploaded source information of the deployment.
    :type source:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.UserSourceInfo
    :param deployment_settings: Deployment settings of the Deployment
    :type deployment_settings:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentSettings
    :ivar provisioning_state: Provisioning state of the Deployment. Possible
     values include: 'Creating', 'Updating', 'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceProvisioningState
    :ivar status: Status of the Deployment. Possible values include:
     'Stopped', 'Running'
    :vartype status: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceStatus
    :ivar instances: Collection of instances belong to the Deployment
    :vartype instances:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentInstance]
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'instances': {'readonly': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'UserSourceInfo'},
        'deployment_settings': {'key': 'deploymentSettings', 'type': 'DeploymentSettings'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'instances': {'key': 'instances', 'type': '[DeploymentInstance]'},
    }

    def __init__(self, *, source=None, deployment_settings=None, **kwargs) -> None:
        super(DeploymentResourceProperties, self).__init__(**kwargs)
        self.source = source
        self.deployment_settings = deployment_settings
        self.provisioning_state = None
        self.status = None
        self.instances = None


class DeploymentSettings(Model):
    """Deployment settings payload.

    :param cpu: Required CPU, basic tier should be 1, standard tier should be
     in range (1, 4)
    :type cpu: str
    :param memory: Required Memory, (1Gi, 2Gi, ..., 8Gi) for Tanzu
    :type memory: str
    :param environment_variables: Collection of environment variables
    :type environment_variables: dict[str, str]
    :param serve_traffic: Indicates whether the Deployment serves traffic for
     App
    :type serve_traffic: bool
    :param addon_config: Collection of addons
    :type addon_config: dict[str,
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AddonProfile]
    """

    _attribute_map = {
        'cpu': {'key': 'cpu', 'type': 'str'},
        'memory': {'key': 'memory', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'serve_traffic': {'key': 'serveTraffic', 'type': 'bool'},
        'addon_config': {'key': 'addonConfig', 'type': '{AddonProfile}'},
    }

    def __init__(self, *, cpu: str=None, memory: str=None, environment_variables=None, serve_traffic: bool=None, addon_config=None, **kwargs) -> None:
        super(DeploymentSettings, self).__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory
        self.environment_variables = environment_variables
        self.serve_traffic = serve_traffic
        self.addon_config = addon_config


class GitPatternRepository(Model):
    """Git pattern repository property payload.

    All required parameters must be populated in order to send to Azure.

    :param uri: Required. URI of the repository
    :type uri: str
    :param patterns: Required. Collection of patterns of the repository, such
     as {application}/{profile}
    :type patterns: list[str]
    :param label: Label of the repository
    :type label: str
    :param search_paths: Searching path of the repository
    :type search_paths: list[str]
    :param username: Username of git repository basic auth.
    :type username: str
    :param password: Password of git repository basic auth.
    :type password: str
    :param host_key: Public sshKey of git repository.
    :type host_key: str
    :param host_key_algorithm: SshKey algorithm of git repository.
    :type host_key_algorithm: str
    :param private_key: Private sshKey algorithm of git repository.
    :type private_key: str
    :param strict_host_key_checking: Strict host key checking or not.
    :type strict_host_key_checking: bool
    """

    _validation = {
        'uri': {'required': True},
        'patterns': {'required': True},
    }

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
        'patterns': {'key': 'patterns', 'type': '[str]'},
        'label': {'key': 'label', 'type': 'str'},
        'search_paths': {'key': 'searchPaths', 'type': '[str]'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'host_key': {'key': 'hostKey', 'type': 'str'},
        'host_key_algorithm': {'key': 'hostKeyAlgorithm', 'type': 'str'},
        'private_key': {'key': 'privateKey', 'type': 'str'},
        'strict_host_key_checking': {'key': 'strictHostKeyChecking', 'type': 'bool'},
    }

    def __init__(self, *, uri: str, patterns, label: str=None, search_paths=None, username: str=None, password: str=None, host_key: str=None, host_key_algorithm: str=None, private_key: str=None, strict_host_key_checking: bool=None, **kwargs) -> None:
        super(GitPatternRepository, self).__init__(**kwargs)
        self.uri = uri
        self.patterns = patterns
        self.label = label
        self.search_paths = search_paths
        self.username = username
        self.password = password
        self.host_key = host_key
        self.host_key_algorithm = host_key_algorithm
        self.private_key = private_key
        self.strict_host_key_checking = strict_host_key_checking


class ResourceUploadDefinition(Model):
    """Resource upload definition payload.

    :param relative_path: Source relative path
    :type relative_path: str
    :param upload_url: Upload URL
    :type upload_url: str
    """

    _attribute_map = {
        'relative_path': {'key': 'relativePath', 'type': 'str'},
        'upload_url': {'key': 'uploadUrl', 'type': 'str'},
    }

    def __init__(self, *, relative_path: str=None, upload_url: str=None, **kwargs) -> None:
        super(ResourceUploadDefinition, self).__init__(**kwargs)
        self.relative_path = relative_path
        self.upload_url = upload_url


class Sku(Model):
    """Sku of Azure Spring Cloud Tanzu.

    :param name: Name of the Sku
    :type name: str
    :param tier: Tier of the Sku
    :type tier: str
    :param capacity: Current capacity of the target resource
    :type capacity: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(self, *, name: str=None, tier: str=None, capacity: int=None, **kwargs) -> None:
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.capacity = capacity


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags


class TanzuClusterResource(TrackedResource):
    """Tanzu Service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    :param properties: Properties of the Service resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.TanzuClusterResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'TanzuClusterResourceProperties'},
    }

    def __init__(self, *, location: str=None, tags=None, properties=None, **kwargs) -> None:
        super(TanzuClusterResource, self).__init__(location=location, tags=tags, **kwargs)
        self.properties = properties


class TanzuClusterResourceProperties(Model):
    """Tanzu Service properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: Provisioning state of the Service. Possible
     values include: 'Creating', 'Updating', 'Deleting', 'Deleted',
     'Succeeded', 'Failed', 'Moving', 'Moved', 'MoveFailed'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(TanzuClusterResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = None


class TriggeredBuildResult(Model):
    """The build result triggered by a build.

    :param id: The unique build id of this build result
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(TriggeredBuildResult, self).__init__(**kwargs)
        self.id = id


class UserSourceInfo(Model):
    """Source information for a deployment.

    :param build_result_id: Resource id of a succeeded build result to deploy
     to this deployment.
    :type build_result_id: str
    """

    _attribute_map = {
        'build_result_id': {'key': 'buildResultId', 'type': 'str'},
    }

    def __init__(self, *, build_result_id: str=None, **kwargs) -> None:
        super(UserSourceInfo, self).__init__(**kwargs)
        self.build_result_id = build_result_id


class ValidateMessages(Model):
    """Validate messages of the configuration service git repositories.

    :param messages:
    :type messages: list[str]
    """

    _attribute_map = {
        'messages': {'key': 'messages', 'type': '[str]'},
    }

    def __init__(self, *, messages=None, **kwargs) -> None:
        super(ValidateMessages, self).__init__(**kwargs)
        self.messages = messages
